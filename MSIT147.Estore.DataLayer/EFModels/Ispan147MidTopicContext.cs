// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MSIT147.Estore.DataLayer.EFModels
{
    public partial class ISpan147MidTopicContext : DbContext
    {
        public ISpan147MidTopicContext()
        {
        }

        public ISpan147MidTopicContext(DbContextOptions<ISpan147MidTopicContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Brands> Brands { get; set; }
        public virtual DbSet<CartItems> CartItems { get; set; }
        public virtual DbSet<Carts> Carts { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<CouponOwners> CouponOwners { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Evaluations> Evaluations { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<MerchandiseTags> MerchandiseTags { get; set; }
        public virtual DbSet<Merchandises> Merchandises { get; set; }
        public virtual DbSet<OrderLists> OrderLists { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PaymentMethods> PaymentMethods { get; set; }
        public virtual DbSet<Specs> Specs { get; set; }
        public virtual DbSet<Tags> Tags { get; set; }
        public virtual DbSet<UsedCoupons> UsedCoupons { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ISpan147MidTopic;Persist Security Info=True;User ID=sa6;Password=sa6");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Brands>(entity =>
            {
                entity.HasKey(e => e.BrandId)
                    .HasName("PK_Brand");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CartItems>(entity =>
            {
                entity.HasKey(e => e.CartItemId);

                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.CartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Carts");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Specs");
            });

            modelBuilder.Entity<Carts>(entity =>
            {
                entity.HasKey(e => e.CartId);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carts_Members");
            });

            modelBuilder.Entity<Categories>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("PK_Category");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<CouponOwners>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CouponSerialNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.HasOne(d => d.Coupon)
                    .WithMany()
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouponOwner_Coupons");

                entity.HasOne(d => d.Member)
                    .WithMany()
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouponOwner_Members");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK_Coupon");

                entity.Property(e => e.CouponDiscountCondition).HasColumnType("money");

                entity.Property(e => e.CouponEndDate).HasColumnType("date");

                entity.Property(e => e.CouponRebate).HasColumnType("money");

                entity.Property(e => e.CouponStartDate).HasColumnType("date");

                entity.HasOne(d => d.CouponEligibleTag)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.CouponEligibleTagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupons_Tags");
            });

            modelBuilder.Entity<Employees>(entity =>
            {
                entity.HasKey(e => e.EmployeeId);

                entity.Property(e => e.EmployeeAccount)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeeAvatarPath).HasMaxLength(50);

                entity.Property(e => e.EmployeeEmail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeePassword)
                    .IsRequired()
                    .HasMaxLength(65);

                entity.Property(e => e.EmployeePhone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Evaluations>(entity =>
            {
                entity.HasKey(e => e.EvaluationId);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(50)
                    .HasColumnName("ImageURL");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluations_Members");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluations_Merchandises");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluations_Orders");
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("PK_Member");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Address).HasMaxLength(30);

                entity.Property(e => e.Avatar).HasMaxLength(50);

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength();

                entity.Property(e => e.MemberName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.NickName).HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(65)
                    .IsFixedLength();

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MerchandiseTags>(entity =>
            {
                entity.HasNoKey();

                entity.HasOne(d => d.Merchandise)
                    .WithMany()
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MerchandiseTags_Merchandises");

                entity.HasOne(d => d.Tag)
                    .WithMany()
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MerchandiseTags_Tags");
            });

            modelBuilder.Entity<Merchandises>(entity =>
            {
                entity.HasKey(e => e.MerchandiseId)
                    .HasName("PK_Merchandise");

                entity.Property(e => e.MerchandiseId).HasColumnName("MerchandiseID");

                entity.Property(e => e.BrandId).HasColumnName("BrandID");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(50)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Brand)
                    .WithMany(p => p.Merchandises)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Merchandises_Brands");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Merchandises)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Merchandise_Category");
            });

            modelBuilder.Entity<OrderLists>(entity =>
            {
                entity.HasKey(e => e.OrderListId)
                    .HasName("PK_OrderList");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderLists)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderList_Orders");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.OrderLists)
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderLists_Specs");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasKey(e => e.OrderId);

                entity.Property(e => e.ContactPhoneNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.DeliveryAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PurchaseTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(200);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Member");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_PaymentMethods");
            });

            modelBuilder.Entity<PaymentMethods>(entity =>
            {
                entity.HasKey(e => e.PaymentMethodId);

                entity.Property(e => e.PaymentMethodId).ValueGeneratedNever();

                entity.Property(e => e.PaymentMethodName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Specs>(entity =>
            {
                entity.HasKey(e => e.SpecId)
                    .HasName("PK_ProductName");

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.Specs)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Specs_Merchandises");
            });

            modelBuilder.Entity<Tags>(entity =>
            {
                entity.HasKey(e => e.TagId);

                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UsedCoupons>(entity =>
            {
                entity.HasKey(e => e.UsedCouponId);

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.UsedCoupons)
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsedCoupons_Coupons");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.UsedCoupons)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsedCoupons_Orders");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}