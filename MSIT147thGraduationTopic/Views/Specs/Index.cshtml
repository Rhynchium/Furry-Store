@model IEnumerable<MSIT147thGraduationTopic.Models.ViewModels.SpecVM>

@{
    Layout = "_BackstagePage";
    ViewData["Title"] = "商品規格檢視";
}

<div class="container">
    <h1 class="title">商品規格檢視</h1>

    <div class="bg-light rounded shadow p-5">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        商品名稱
                    </th>
                    <th>
                        品牌
                    </th>
                    <th>
                        商品類別
                    </th>
                    <th>
                        商品說明
                    </th>
                    <th>
                        商品圖片
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td id="mName"></td>
                    <td id="mBrand"></td>
                    <td id="mCategory"></td>
                    <td id="mDescription"></td>
                    <td><img id="mImage" class="imgtumbnail" /></td>
                </tr>
            </tbody>
        </table>
        <p>
            @Html.ActionLink("新增商品規格", "Create", "Specs", new {merchandiseid = ViewBag.MerchandiseId}, new { @class = "btn btn-primary" })
        </p>
        <hr />
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        檢視序號
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.SpecName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ImageUrl)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DiscountPercentage)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DisplayOrder)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Popularity)
                    </th>
                    <th style="text-align:center">
                        @Html.DisplayNameFor(model => model.OnShelf)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    int count = 0;
                    foreach (var item in Model)
                    {
                        count++;
                        <tr>
                            <td>
                                @count
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SpecName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Price)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Amount)
                            </td>
                            <td>
                                @{ string imageurl = string.IsNullOrEmpty(item.ImageUrl) ? "default.png" : item.ImageUrl; }
                                <img src="@Url.Content("~/uploads/specPicture/" + imageurl)" class="imgtumbnail" />
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DiscountPercentage)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DisplayOrder)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Popularity)
                            </td>
                            <td style="text-align:center">
                                @Html.DisplayFor(modelItem => item.OnShelf)
                            </td>
                            <td>
                                @Html.ActionLink("修改", "Edit", "Specs", new { id=item.SpecId }, new { @class = "btn btn-warning" }) |
                                <button class="btn btn-success fortag" data-specid="@item.SpecId">管理標籤</button> |
                                <button class="btn btn-danger fordelete" data-specid="@item.SpecId">刪除</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="form-group">
            @Html.ActionLink("回到商品檢視", "Index", "Merchandises", null, new { @class = "btn btn-secondary" })
        </div>
    </div>
</div>
<!-- Tag 管理頁 -->
<div class="modal fade" id="SpecTagModal" tabindex="-1" aria-labelledby="SpecTagModalLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-4 " id="SpecTagModalLabel">標籤管理</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-10 mx-auto">
                            <form name="AddTagForm">
                                <!-- 輸入Tag名稱 + AutoComplete -->
                                <div class="form-label mb-3">
                                    <label for="TagName" class="fw-bold">標籤名稱</label>
                                    <input class="form-control" id="TagName" type="text" />
                                </div>
                                <div>
                                    <button type="button" class="btn btn-primary me-2" id="btnAddTag">新增標籤</button>
                                </div>
                            </form>
                            <hr />
                            <div class="row" id="currentTag">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @*產生商品資料*@
    <script>
        const mName = document.querySelector("#mName");
        const mBrand = document.querySelector("#mBrand");
        const mCategory = document.querySelector("#mCategory");
        const mDescription = document.querySelector("#mDescription");
        const mImage = document.querySelector("#mImage");

        $(() => {
            const merchandiseid = @ViewBag.MerchandiseId;
            const xhr = new XMLHttpRequest();
            xhr.open("GET", `/ApiSpec/ShowMerchandise/${merchandiseid}`);
            xhr.send();

            xhr.addEventListener("load", () => {
                const datas = JSON.parse(xhr.responseText);
                const merchandise = datas[0];
                mName.innerHTML = merchandise.merchandiseName;
                mBrand.innerHTML = merchandise.brandName;
                mCategory.innerHTML = merchandise.categoryName;
                mDescription.innerHTML = merchandise.description;
                mImage.src = (merchandise.imageUrl != null)
                        ? "@Url.Content("~/uploads/merchandisePicture/")" + merchandise.imageUrl
                        : "@Url.Content("~/uploads/merchandisePicture/default.png")";
            })
        })
    </script>
    @*確認刪除*@
    <script>
        $(".fordelete").click((e) => {
            //if (!confirm('確定刪除規格嗎？')) return;
            Swal.fire({
                title: '確定刪除規格嗎？',
                text: `刪除的資料無法復原！！建議修改上架設定即可！`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '確定刪除',
                cancelButtonText: '取消！！',
                allowOutsideClick: false
            }).then((result) => {
                if (result.isConfirmed) {
                    const currentspecid = $(e.currentTarget).attr("data-specid");

                    Swal.fire({
                        position: 'center',
                        icon: 'success',
                        title: '刪除成功！',
                        showConfirmButton: false,
                        timer: 1500,
                        allowOutsideClick: false
                    }).then(() => {
                        window.location.href = `/Specs/Delete/${currentspecid}`;
                    })
                }
            })
        })
    </script>
    @*管理規格*@
    <script>
        const merchandiseid = @ViewBag.MerchandiseId;
        const SpecTagModal = new bootstrap.Modal(document.querySelector('#SpecTagModal'));

        $(".fortag").click(async (e) => {
            const currentSpecId = $(e.currentTarget).attr("data-specid");
            $("#TagName").val("");
            SpecTagModal.show();

            //陳列既有tag
            const currentTag = document.querySelector("#currentTag");
            const response = await fetch(`@Url.Content("~/ApiTag/CurrentTags/")${currentSpecId}`);
            const NameList = await response.text();
            const Names = JSON.parse(NameList);
            var names = Names.map(names => {
                const { specId, tagId, tagName } = names;
                return (`
                    <td>${tagName}</td>\
                    <td>\
                        <button class="btn btn-danger deletetag" data-specid="${specId}" data-tagid="${tagId}">x</button>\
                    </td>`)
            });
            currentTag.innerHTML = `<tr>` + names.join("") + `</tr>`;

            //新增tag
            $("#btnAddTag").on("click", async () => {
                const tagName = $("#TagName").val();
                const response = await fetch(`@Url.Content("~/Specs/AddTag")`, {
                    body: JSON.stringify({ 'tagName': tagName, 'specId': currentSpecId, 'merchandiseId': merchandiseid }),
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', },
                })

                //更新頁面已顯示變更
                window.location.reload();
            })
            
            //刪除tag
            $(".deletetag").on("click", (e) => {
                Swal.fire({
                    title: '確定刪除這個標籤嗎？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: '刪除',
                    cancelButtonText: '取消',
                    allowOutsideClick: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        const currenttagid = $(e.currentTarget).attr("data-tagid");

                        Swal.fire({
                            position: 'center',
                            icon: 'success',
                            title: '刪除成功！',
                            showConfirmButton: false,
                            timer: 800
                        }).then(() => {
                            window.location.href = `/Specs/DeleteTag/?specId=${currentSpecId}&tagId=${currenttagid}&merchandiseId=${merchandiseid}`;
                        })
                    }
                })
            })

            //設定AutoComplete選項
            const response2 = await fetch(`@Url.Content("~/ApiTag/AutoCompleteOptions")`);
            const jsonTagList = await response2.text();
            const TagList = JSON.parse(jsonTagList);

            let optionTags = [];
            TagList.forEach(tags => {
                optionTags.push(`${tags}`);
            });
            console.log(optionTags);

            $("#TagName").autocomplete({
                //source: ["貓用", "狗用", "鼠用", "兔用"],
                source: optionTags,
                minLength: 1
            },{});
        })
    </script>
}

@section Styles{
    <style>
        .title {
            margin-top: 30px;
            margin-bottom: 10px;
        }

        .imgtumbnail {
            max-width: 70px;
            min-width: 70px;
        }
    </style>
}